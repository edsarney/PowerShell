# CUTOFF [-run | -test] <vmname>
#
# 1. Given a VM name, query the VM for its host and retrieve the network
# configuration settings for the VM (NICs assigned and virtual switch
# connections). Save this info to the current local user desktop as
#   <host>-<vm>-NICS.xml
# 2. Create a reconnection script on the current local user desktop as
#   Restore-<host>-<vm>-NICS.ps1
# 3. Disconnect the virtual NICs, cutting the VM off from any network activity.
#
# Typical use to isolate a VM file server from a ransomware attack.
#-------------------------------------------------------------------------------
# .002  Working to download config and disable NICs.
# .003  Add switches and arguments
#-------------------------------------------------------------------------------
# Parse the command line arguments and verify usage.
#-------------------------------------------------------------------------------
$mode = $args[0]
$vm = $args[1]

if (($mode -ne "-run" -and $mode -ne "-test") -or $vm -eq "") {
    "Usage: cutoff [-test | -run] <vmname>" | out-host
    exit
}

if ($mode -eq "-test") {
    "`r`nTEST MODE: Target VM NICS will NOT be disconnected.`r`n" | out-host
}
#-------------------------------------------------------------------------------
# Query the VM and have it tell us what host it's running on. This is crucial
# because the VM could be on either primary or secondary hosts.
#-------------------------------------------------------------------------------
">>Looking for $vm" | out-host
$hostfqdn = invoke-command -ComputerName $vm -ScriptBlock {
    (get-item "HKLM:\SOFTWARE\Microsoft\Virtual Machine\Guest\Parameters").GetValue("HostName")
}
">>Found $vm on host $hostfqdn" | out-host

$hostname = $hostfqdn.split(".")[0]
">>Truncated hostname fqdn to $hostname" | out-host
#-------------------------------------------------------------------------------
# Get the network adapter config from the VM's host into a local variable.
#-------------------------------------------------------------------------------
">>Retrieving NIC configurations for $vm" | out-host
$na = invoke-command -ComputerName $hostname -ScriptBlock {get-vmnetworkadapter $using:vm}
#-------------------------------------------------------------------------------
# Export the configuration into a local file on the current user's desktop.
#-------------------------------------------------------------------------------
$targetfile = "C:\users\$env:username\Desktop\$hostname-$vm-NICS.xml"
">>Exporting network configurations to $targetfile`r`n"

$na | Export-Clixml $targetfile
#-------------------------------------------------------------------------------
# Write the restore script with all the details to restore this specific VM.
#-------------------------------------------------------------------------------
$restorefile = "C:\users\$env:username\Desktop\Restore-$hostname-$vm-NICS.ps1"
">>Creating restore file: $restorefile" | out-host

"#File to restore $vm NICs on $hostname (autogenerated)`r`n#" | out-file $restorefile

'$hostname = "' + $hostname + '"' | add-content $restorefile
'$vm = "' + $vm + '"' | add-content $restorefile

"#`r`n#Retrieve network configuration information from previously saved file:" | add-content $restorefile
"#    $targetfile" | add-content $restorefile

'$backupnetworkadapter = Import-Clixml ' + $targetfile | add-content $restorefile

'invoke-command -ComputerName $hostname -ScriptBlock {' | add-content $restorefile
'    foreach ($adapter in $using:backupnetworkadapter) {' | add-content $restorefile
'        $networkcard = get-vmnetworkadapter -VMName $using:vm | Where-object {$_.id -eq $adapter.Id}' | add-content $restorefile
'        Connect-VMNetworkAdapter -VMNetworkAdapter $networkcard -SwitchName $adapter.switchname' | add-content $restorefile
'    }' | add-content $restorefile
'}' | add-content $restorefile

">>Restore file complete`r`n" | out-host

#-------------------------------------------------------------------------------
# If the -run switch is present, execute the commands on the remote system to
# shut down all the NICs.
#-------------------------------------------------------------------------------
if ($mode -eq "-run") {
    invoke-command -ComputerName $hostname -ScriptBlock {
        $networkadapters = get-vmnetworkadapter $using:vm
        $networkadapters | % {Disconnect-VMNetworkAdapter $_}
    }
}

# Thats all she wrote.

